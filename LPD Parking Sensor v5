/*
Version 6
Prototype parking sensor using LPD8806 addressable LEDs, sharp 2y0a02 distance sensor and a Light Dependent Resistor.
Original LED library from Adafruit (please support them the do great work and publish lots of libraries for use. 
I'm using an Arduino Nano.
Distance sensor connected to Analog pin 0
Resistor connected to Analog pin 2 
LPD8806 dataPin  = 2;
LPD8806 clockPin = 3;
Big shout out to the people over at reddit r/arduino - for helping with my code problems. 

Disclaimer - I'm still learning how to code, any improvements  or suggestions very welcome. 
There will probably be better, more efficient  ways to handle the LED writing back and findorth;
I'd love to hear how. 

Next Version: 
I'd like to flash or wipe the last 6 or so LEDs in the middle (redMiddle etc) to signal to stop.
I'm hoping to include a sleep function. 

*/

#include "LPD8806.h"
#include "SPI.h"

// Number of RGB LEDs in strand:
int nLEDs = 48;

// LPD8806 output pins:
int dataPin  = 2;
int clockPin = 3;

// First parameter is the number of LEDs in the strand.  The LED strips
// are 32 LEDs per meter but you can extend or cut the strip.  Next two
// parameters are SPI data and clock pins:
LPD8806 strip = LPD8806(nLEDs, dataPin, clockPin);

// You can optionally use hardware SPI for faster writes, just leave out
// the data and clock pin parameters.  But this does limit use to very
// specific pins on the Arduino.  For "classic" Arduinos (Uno, Duemilanove,
// etc.), data = pin 11, clock = pin 13.  For Arduino Mega, data = pin 51,
// clock = pin 52.  For 32u4 Breakout Board+ and Teensy, data = pin B2,
// clock = pin B1.  For Leonardo, this can ONLY be done on the ICSP pins.
//LPD8806 strip = LPD8806(nLEDs);


// This is the smoothing average control for the distance sensor;
// A higher number = smoother result but longer processing time.

const int numReadings = 12;

int readings[numReadings];      // the readings from the analog input
int readIndex = 0;              // the index of the current reading
int total = 0;                  // the running total
int average = 0;                // the average

// Analog distance sensor pin.
int inputPin = A0; 

// Variable to hold the raw sensor value.
int sensorValue = 0;

// Variable to hold the raw voltage.
float voltage = 0;

// To Remove?
// int delayPause = 10;

// Are the headlights on or off variable.
int headLights = 0;

// Variables to hold the current distance.
int currentMappedAverage = 0;
int lastMappedAverage = 0;
int currentMappedAverageMinus = 0;

// Variables holding the colour information for the LEDs.
int red = 0;
int green = 127;
int blue = 0;

// Variables to turn on the LEDs when the object gets super close. 
int  greenMiddle = 0;
int  redMiddle = 0;
int  blueMiddle = 0;

void setup(){
  Serial.begin(9600);

  
    // initialize all the LED readings to 0: 
  for (int thisReading = 0; thisReading < numReadings; thisReading++)
    readings[thisReading] = 0;    

    // Start up the LED strip
  strip.begin();

  // Update the strip, to start they are all 'off'
  strip.show();


}

void loop(){

    // read the light input on analog pin A2:
  sensorValue = analogRead(A2);
  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V):
  voltage = sensorValue * (5.0 / 1023.0);
  // print out the value you read:
  Serial.print("Voltage: ");
  Serial.println(voltage);
  
  //Below is the averaging code:
    // subtract the last reading:
  total= total - readings[readIndex];         
  // read from the sensor:  
  readings[readIndex] = analogRead(inputPin); 
  // add the reading to the total:
  total= total + readings[readIndex];       
  // advance to the next position in the array:  
  readIndex = readIndex + 1;                    

  // if we're at the end of the array...
  if (readIndex >= numReadings)              
    // ...wrap around to the beginning: 
    readIndex = 0;                           

  // calculate the average:
  average = total / numReadings;         
  // send it to the computer as ASCII digits
  
  Serial.print("Average: ");
  Serial.println(average); 

// Map the average to match the number of my LEDs (48 / 2).
  currentMappedAverage = map(average, 1, 350, 0, 24);
 // currentMappedAverage = constrain(currentMappedAverage, 0, 47);
 currentMappedAverageMinus = 47 - currentMappedAverage;

// The below if conditions change the colours of the LEDs based on how 
// close the object is to the sensor.

if (currentMappedAverage >= 20 ) {
    green = 0;
    red = 127;
    blue = 0;
}

if (currentMappedAverage >= 14 && currentMappedAverage <= 19  ) {
    green = 30;
    red = 127;
    blue = 0;
}

if (currentMappedAverage <= 13 )  {
  green = 127;
  red = 0;
  blue = 0;
}

if (currentMappedAverage <= 0 )  {
  green = 127;
  red = 0;
  blue = 0;
}


  
// Check Light Resistor - 1 is on and 0 is off. 
/*****************************************************************************/

if (voltage >= .2) {
    headLights = 1;
}

if (voltage < .1) {
  headLights = 0;
  int i;
  for(i=0; i<strip.numPixels(); i++) strip.setPixelColor(i, 0);
  strip.show();
}

// Check if it's ok to write forwards or clear the LEDs
/*****************************************************************************/

if (currentMappedAverage > lastMappedAverage && headLights == 1) {
    writeLeds(strip.Color(  red,   blue, green), 0);
    writeLedsB(strip.Color(  red,   blue, green), 0);
}


if (currentMappedAverage < lastMappedAverage && headLights == 1) {
 writeLedsBack(strip.Color(  redMiddle,  blueMiddle, greenMiddle), 0);
  Serial.println("Heading Backwards"); 
}

// Variables to turn on the LEDs when the object gets super close.

if (currentMappedAverage >= 22 && headLights == 1 ) {
    //greenMiddle = 127;
   // redMiddle = 127;
    //blueMiddle = 127;
    strip.setPixelColor(23, 127,127,127);
    strip.setPixelColor(24, 127,127,127);
    strip.show();
    
}

if (currentMappedAverage <= 21 ) {
    greenMiddle = 0;
    redMiddle = 0;
    blueMiddle = 0;
}

// Debugging 
Serial.print("headLights: "); 
Serial.println(headLights); 
Serial.print("currentMappedAverage: "); 
Serial.println(currentMappedAverage);
Serial.print("lastMappedAverage: "); 
Serial.println(lastMappedAverage);

}

// Function to write LEDs i.e is the object is getting closer or further away, 
// Because we come in from both Left and Right we need write those individually. 
/*****************************************************************************/
// Left
void writeLeds(uint32_t c, uint8_t wait) {
 int i;

  for(i=0; i < currentMappedAverage; i++) {
  strip.setPixelColor(i, c);
  strip.show();
  lastMappedAverage = i;
}
}

// Right
void writeLedsB(uint32_t b, uint8_t waitb) { 
   int j;
   
  for(j=47; j > currentMappedAverageMinus; j--) {
  strip.setPixelColor(j, b);
  strip.show(); 
}
}

// Function to clear the LEDs if the object drops further away.

void writeLedsBack(uint32_t c, uint8_t wait) {
 int i;
 
  for(i=currentMappedAverageMinus; i > lastMappedAverage; i--) {
  strip.setPixelColor(i, c);
  strip.show();
  lastMappedAverage = currentMappedAverage - 1; 
}
}

/* Helper functions - Thanks to Adafruit */
/*****************************************************************************/

//Input a value 0 to 384 to get a color value.
//The colours are a transition r - g -b - back to r

uint32_t Wheel(uint16_t WheelPos)
{
  byte r, g, b;
  switch(WheelPos / 128)
  {
    case 0:
      r = 127 - WheelPos % 128;   //Red down
      g = WheelPos % 128;      // Green up
      b = 0;                  //blue off
      break; 
    case 1:
      g = 127 - WheelPos % 128;  //green down
      b = WheelPos % 128;      //blue up
      r = 0;                  //red off
      break; 
    case 2:
      b = 127 - WheelPos % 128;  //blue down 
      r = WheelPos % 128;      //red up
      g = 0;                  //green off
      break; 
  }
  return(strip.Color(r,g,b));
}

